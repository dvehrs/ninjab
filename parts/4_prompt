if [ ${load_part_prompt} ]; then
    [ ${startup_debug} ] && echo " loading" ||:
else
    [ ${startup_debug} ] && echo " skipping" ||:
    return
fi

int_ninjab_available_parts="$int_ninjab_available_parts 4_prompt"

#-------------------------------------------------------------
# Bash prompt
#-------------------------------------------------------------
# Orginal Filename:      4_prompt
# Author:    Dave Vehrs
# Last Modified: 31 May 2012 03:26:37 PM by Dave
# Edited from time to time by Lars Solberg (xeor) 2008-2011
#  - Added exit code status if >0 (Found on a forum, from Dave Vehrs)
#  - Minor changes, dont remember what it was..
#  - Display svn/git version if in svn/git directory
#  - Removed automatic creating of aliases. It was slow and really
#    not so usefull.
#  - Changed the way of getting our own cmddline and PPID cmdline,
#    to live in harmony with osx and other OS'es not using /proc
#  - Added support for python virtualenv
#  - Checks if screen exists before polling it. So no unknown command msg is shown
#  - Fixed a bug that made a "ghost character" at the beginning of the line if error code != 0
#    and the line was longer than >20 characters or so.. Weird bash issue..
#  - Fixed wc -l output differ in bsd systems. Trim away everything not 0-9.
#  - $ or # depending on the uid
#  - Added SUDO_PS1, to fix bug#1
#  - Support for system type and system category
#  - Changed the way colors work, and added some colorfull help
#  - Added timer for last command
#  - Added tmux session counter, just like screen.
#  - More changes to color handeling.
#
# Tested
#  - OK on OSX 10.6.7 with bash 3.2.48

function int_ninjab_help_4_prompt() {
cat <<EOF
   Current Format: [(SYSTEM TYPE)] USER@HOST [dynamic section] { CURRENT DIRECTORY }$"
   SYSTEM TYPE: (Will only be visible if sysinfo is defined.
     $(set_color red tput)Red$(set_color none tput)          == Critical system
     $(set_color yellow tput)Yellow$(set_color none tput)       == Production system
     $(set_color green tput)Green$(set_color none tput)        == Test system
   USER:      (also sets the base color for the prompt)
     $(set_color red tput)Red$(set_color none tput)          == Root(UID 0) Login shell (i.e. sudo bash)
     $(set_color ered tput)Light Red$(set_color none tput)    == Root(UID 0) Login shell (i.e. su -l or direct login)
     $(set_color yellow tput)Yellow$(set_color none tput)       == Root(UID 0) priviledges in non-login shell (i.e. su)
     $(set_color eyellow tput)Light Yellow$(set_color none tput) == SU to user other than root(UID 0)
     $(set_color green tput)Green$(set_color none tput)        == Normal user
   @:
     $(set_color ered tput)Light Red$(set_color none tput)    == http_proxy environmental variable undefined.
     $(set_color green tput)Green$(set_color none tput)        == http_proxy environmental variable configured.
   HOST:
     $(set_color red tput)Red$(set_color none tput)          == Insecure remote connection (unknown type)
     $(set_color yellow tput)Yellow$(set_color none tput)       == Insecure remote connection (Telnet)
     $(set_color eyellow tput)Light Yellow$(set_color none tput) == Insecure remote connection (RSH)
     $(set_color cyan tput)Cyan$(set_color none tput)         == Secure remote connection (i.e. SSH)
     $(set_color green tput)Green$(set_color none tput)        == Local session
   GLOBAL VARIABLE INFORMATION:
     $(set_color ecyan tput)[venv:NAME]$(set_color none tput)  == Name of the virtual envirnoment you are currently using if using
                      python virtual_env
   CURRENT DIR INFORMATION:
     $(set_color magenta tput)[svn:#:#]$(set_color none tput)    == Display version of current svn directory
                  Will contain * at end if you got local modification
                  If two numbers, 1st is last updated version, 2nd is your version
                  If one number, your version is the last checked out
     $(set_color magenta tput)[git:#]$(set_color none tput)      == Display version of current git directory
                  Will contain * if you got local modification
                  Will contain ex, +2 if you are 2 commits ahead of origin
   DYNAMIC SECTION:
       (If count is zero for any of the following, it will not appear)
     $(set_color red tput)[es:#]$(set_color none tput)       == Exit code of last command run
     [scr:#]     ==== Number of detached screen sessions
       $(set_color yellow tput)Yellow$(set_color none tput)     == 1-2
       $(set_color red tput)Red$(set_color none tput)        == 3+
     [tmux:#]    ==== Number of tmux sessions
       $(set_color yellow tput)Yellow$(set_color none tput)     == 1-2
       $(set_color red tput)Red$(set_color none tput)        == 3+
     [bg:#]      ==== Number of backgrounded but still running jobs
       $(set_color yellow tput)Yellow$(set_color none tput)     == 1-10
       $(set_color red tput)Red$(set_color none tput)        == 11+
     [stp:#]     ==== Number of stopped (backgrounded) jobs
       $(set_color yellow tput)Yellow$(set_color none tput)     == 1-2
       $(set_color red tput)Red$(set_color none tput)        == 3+
     $(set_color yellow tput)[cmdtime:#]$(set_color none tput) ==== Number of seconds the previous command took
   CURRENT DIRECTORY:     (truncated to 1/3 screen width)
     $(set_color red tput)Red$(set_color none tput)          == Current user does not have write priviledges
     $(set_color green tput)Green$(set_color none tput)        == Current user does have write priviledges
   NOTE:
     1.  Displays message on day change at midnight on the line above the
         prompt (Day changed to...).
     2.  Command is added to the history file each time you hit enter so its
         available to newly spawned shells
EOF
}

function int_prompt_get_color() {
    # TODO: Work in progress, not done
    # Better handling of colors in the prompt. Will be faster because it assigns variables of color type at the beginning, can be used for theming as well
    echo
}

function int_prompt_hms() {
    local ts=${1}
    local h=$((${ts} / 3600)); [[ $h -eq 0 ]] && h='' || h="${h}h"
    local m=$((${ts} % 3600 / 60)); [[ $m -eq 0 ]] && m='' || m="${m}m"
    local s=$((${ts} % 60)); [[ $s -eq 0 ]] && s='' || s="${s}s"

    local tArray=(${h} ${m} ${s})
    local out=$(printf ",%s" "${tArray[@]}")
    echo ${out:1}
}


# Function to set prompt_command to.
function promptcmd() {
    history -a
    local SSH_FLAG=0

    # Test for local or remote connections
    if [[ ${SSH_CLIENT} ]] || [[ ${SSH2_CLIENT} ]]; then
        SSH_FLAG=1
    fi
    if [ ${SSH_FLAG} -eq 1 ]; then
        local CONNECTION_TYPE=SSH
        local TITLE_PREFIX="SSH: "
    else
        local parent_process=$(ps -p $PPID -o comm | tail -n 1)
        if [[ "${parent_process}" == "login" ]]; then
            local grandparent_pid=$(grep PPid /proc/${PPID}/status | cut -f 2 -d :)
            local grandparent_pname=$(ps -p ${grandparent_pid} -o comm | tail -n 1)
            if [[ "${grandparent_pname}" == "in.rlogind" ]]; then
                local CONNECTION_TYPE=RSH
                local TITLE_PREFIX="RSH: "
            elif [[ "${grandparent_pname}" == "in.telnetd" ]]; then
                # Need to test Telnet
                local CONNECTION_TYPE=TELNET
                local TITLE_PREFIX="TELNET: "
            elif [[ "${grandparent_pname}" == "init" ]]; then
                # Added this check here for local console sessions will
                # mistakenly pass the parent_process test.  However the
                # grandparent process will be init.
                local CONNECTION_TYPE=LOCAL
                local TITLE_PREFIX="LOCAL: "
            else
                local CONNECTION_TYPE=UNKNOWN
                local TITLE_PREFIX="Unknown Session type: "
            fi
        else
            # In X Windows sessions, most terminal sessions appear to fail the
            # parent_process test for "login".  That's why this piece is here.
            local CONNECTION_TYPE=LOCAL
            local TITLE_PREFIX="LOCAL: "
        fi
    fi

    if [[ ${SUDO_USER} ]]; then
        local TITLE_PREFIX+="SUDO: "
    fi

    # Titlebar
    # BUG: Window Titles are correct if you do a RSH connection to another host
    # from within a Screen session.  However if you do a Screen session within
    # an existing RSH session the title will show just the Screen portion as if
    # it were a local session.
    if [ -z "${load_part_prompt_dontset_titlebar}" ]; then
        case ${TERM} in
            xterm*  )
                local TITLEBAR="\[\033]0;${TITLE_PREFIX}\u@\h { \w }  \007\]"
                ;;
            screen*  )
                local TITLEBAR='\[\033k'
                TITLEBAR+="${TITLE_PREFIX}\u@\h { $(prompt_workingdir) }"
                TITLEBAR+='\033\\\]'
                ;;
            *       )
                local TITLEBAR=""
                ;;
        esac
    fi

    PS1=""

    # System type and category
    if [ ! -z "${system_info_check}" ]; then
	[ -f /etc/sysinfo ] && source /etc/sysinfo
	[ -f ~/.sysinfo ] && source ~/.sysinfo
    fi
    case ${system_type} in
	"crit"|"critical")
	    local system_type_color="\[$(set_color red)\]"
	    ;;
	"prod")
	    local system_type_color="\[$(set_color yellow)\]"
	    ;;
	"test")
	    local system_type_color="\[$(set_color green)\]"
	    ;;
    esac
    if [ -z "${system_category}" ]; then
	if [ ! -z "${system_type}" ]; then
	    local system_category="${system_type}"
	fi
    fi
    [ -z "${system_category}" ] || PS1="${PS1}${system_type_color:-""}(${system_category})\[$(set_color)\] "

   PS1+="${TITLEBAR}"

    # Test for day change.
    if [ ! -z ${load_part_prompt_notifyDaychange} ]; then
	if [ -z $DAY ] ; then
            export DAY=$(date +%A)
	else
            local today=$(date +%A)
            if [ "${DAY}" != "${today}" ]; then
		PS1+="\n\[$(set_color green)\]Day changed to $(date '+%A, %d %B %Y').\[$(set_color)\]\n"
		export DAY=$today
	    fi
	fi
    fi

    # User
    if [ ${UID} -eq 0 ] ; then
        if [ "${USER}" == "${LOGNAME}" ]; then
            if [[ ${SUDO_USER} ]]; then
                PS1+="\[$(set_color red)\]\u\[$(set_color)\]"
            else
                PS1+="\[$(set_color ered)\]\u\[$(set_color)\]"
            fi
        else
            PS1+="\[$(set_color yellow)\]\u\[$(set_color)\]"
        fi
    else
        if [ ${USER} == ${LOGNAME} ]; then
            PS1+="\[$(set_color green)\]\u\[$(set_color)\]"
        else
            PS1+="\[$(set_color eyellow)\]\u\[$(set_color)\]"
        fi
    fi

    # HTTP Proxy var configured or not
    if [ -n "$http_proxy" ] ; then
        PS1+="\[$(set_color green)\]@\[$(set_color)\]"
    else
        PS1+="\[$(set_color ered)\]@\[$(set_color)\]"
    fi

    # Host
    case ${CONNECTION_TYPE} in 
        LOCAL )
            PS1+="\[$(set_color green)\]\h\[$(set_color)\] "
            ;;
        SSH )
            PS1+="\[$(set_color cyan)\]\h\[$(set_color)\] "
            ;;
        RSH )
            PS1+="\[$(set_color eyellow)\]\h\[$(set_color)\] "
            ;;
        TELNET )
            PS1+="\[$(set_color yellow)\]\h\[$(set_color)\] "
            ;;
        UNKNOWN )
            PS1+="\[$(set_color ered)\]\h\[$(set_color)\] "
            ;;
    esac

#    if [[ ${SSH_CLIENT} ]] || [[ ${SSH2_CLIENT} ]]; then
#        SSH_FLAG=1
#    fi
#    if [ ${SSH_FLAG} -eq 1 ]; then
#        PS1+="\[$(set_color cyan)\]\h\[$(set_color)\] "
#    elif [[ -n ${SESS_SRC} ]]; then
#        if [ "${SESS_SRC}" == "(:0.0)" ]; then
#            PS1+="\[$(set_color green)\]\h\[$(set_color)\] "
#        else
#            local parent_process=$(ps -p $PPID -o comm | tail -n 1)
#            if [[ "$parent_process" == "in.rlogind*" ]]; then
#                PS1+="\[$(set_color eyellow)\]\h\[$(set_color)\] "
#            elif [[ "$parent_process" == "in.telnetd*" ]]; then
#                PS1+="\[$(set_color yellow)\]\h\[$(set_color)\] "
#            else
#                PS1+="\[$(set_color ered)\]\h\[$(set_color)\] "
#            fi
#        fi
#    elif [[ "${SESS_SRC}" == "" ]]; then
#        PS1+="\[$(set_color green)\]\h\[$(set_color)\] "
#    else
#        PS1+="\[$(set_color red)\]\h\[$(set_color)\] "
#    fi

    # Check for python virtualenv
    if [[ $VIRTUAL_ENV ]]; then
	VIRTNAME=$(basename $VIRTUAL_ENV)
	PS1+="\[$(set_color ecyan)[venv:${VIRTNAME}]\[$(set_color)\] "
    fi

    # SVN status if .svn exist
    if [ -d .svn ]; then
	if which svn &> /dev/null ; then
	    local DIRTY REV=$(svnversion . 2>/dev/null)
	    [ "$REV" ] || REV='?'
	    [ "$(svn st &> /dev/null)" ] && DIRTY='*'
            PS1+="\[$(set_color magenta)\][svn:${REV}${DIRTY}]\[$(set_color)\] "
	fi
    fi

    # Display if new Tripwire reports have been generated and the core database
    # needs updating.
    if [ ${load_part_prompt_tripwire} ]; then
        if [[ $(pgrep -f "sudo tripwire --check*") ]] || [[ $(pgrep -u root -f /usr/sbin/tripwire) ]]; then
            PS1+="\[$(set_color red)\][Tripwire Check Running]\[$(set_color)\] "
        else
            if [ -f /var/lib/tripwire/${HOSTNAME}.twd ]; then
                # get time in seconds since the Tripwire database was updated.
                local TRIPDB_UPDATE=$(stat -c %Y /var/lib/tripwire/${HOSTNAME}.twd)
                if [ -d /var/lib/tripwire/report ]; then
                    # Test to be sure reports exist.  Otherwise generates errors.
                    if [[ $(ls /var/lib/tripwire/report/${HOSTNAME}*.twr 2>/dev/null)  ]]; then 
                        # get time the last report was submitted
                        local TRIPREP_BIRTH=$(stat -c %Y $(ls -1ct /var/lib/tripwire/report/${HOSTNAME}*.twr | head -1))
                        if [ ${TRIPDB_UPDATE} -lt ${TRIPREP_BIRTH} ]; then
                            PS1+="\[$(set_color yellow)\][Tripwire+]\[$(set_color)\] "
                        fi
                    fi
                fi
            fi
        fi
    fi

    #  GIT status
    if which git &> /dev/null ; then
	local DIRTY STATUS
	STATUS=$(git status 2>/dev/null)
	if [ $? -ne 128 ]; then
	    [[ "$STATUS" == *'working directory clean'* ]] || DIRTY='*'
	    GITSTATUS="$(git branch --no-color | grep ^* | sed 's/^\* //')"
	    if [ "${GITSTATUS}" == "(no branch)" ]; then
		GITSTATUS="$(git describe --all --always 2> /dev/null | sed 's/^heads\///' 2> /dev/null)"
	    fi
            AHEAD_COUNT="$(git rev-list HEAD --not --remotes 2> /dev/null | wc -l | tr -d ' ')"
            if [[ "x${AHEAD_COUNT}" != "x0" ]]; then
                AHEAD="+${AHEAD_COUNT}"
            else
                AHEAD=''
            fi
            PS1+="\[$(set_color magenta)\][git:${GITSTATUS}${DIRTY}${AHEAD}]\[$(set_color)\] "
	fi
    fi

    # Exit status of the last command run. Must run the command itself from the PS1, so we must pass on this part

    PS1+="\`let exitstatus=\$? ; if [[ \${exitstatus} != 0 ]] ; then echo -ne \"\\[$(set_color red)\][es:\${exitstatus}]\\[$(set_color)\] \" ; fi\`"

    # Detached Screen Sessions
    if which screen &> /dev/null; then
      DTCHSCRN=$(screen -ls | grep -c Detach)
      if [ ${DTCHSCRN} -gt 2 ]; then
          PS1+="\[$(set_color red)\][scr:${DTCHSCRN}]\[$(set_color)\] "
      elif [ ${DTCHSCRN} -gt 0 ]; then
          PS1+="\[$(set_color yellow)\][scr:${DTCHSCRN}]\[$(set_color)\] "
      fi
    fi

    # tmux sessions
    if which tmux &> /dev/null; then
	local DTCHTMUX=$(tmux ls 2> /dev/null | grep -v "(attached)" | wc -l | sed -e 's/[^0-9]//g')
	if [ ${DTCHTMUX} -gt 2 ]; then
            PS1+="\[$(set_color red)\][tmux:${DTCHTMUX}]\[$(set_color)\] "
	elif [ ${DTCHTMUX} -gt 0 ]; then
            PS1+="\[$(set_color yellow)\][tmux:${DTCHTMUX}]\[$(set_color)\] "
	fi
    fi

    # Backgrounded running jobs
    local BKGJBS=$(jobs -r | wc -l | sed -e 's/[^0-9]//g' )
    if [ ${BKGJBS} -gt 2 ]; then
        PS1+="\[$(set_color red)\][bg:${BKGJBS}]\[$(set_color)\] "
    elif [ ${BKGJBS} -gt 0 ]; then
        PS1+="\[$(set_color yellow)\][bg:${BKGJBS}]\[$(set_color)\] "
    fi

    # Stopped Jobs
    local STPJBS=$(jobs -s | wc -l | sed -e 's/[^0-9]//g' )
    if [ ${STPJBS} -gt 2 ]; then
        PS1+="\[$(set_color red)\][stp:${STPJBS}]\[$(set_color)\] "
    elif [ ${STPJBS} -gt 0 ]; then
        PS1+="\[$(set_color yellow)\][stp:${STPJBS}]\[$(set_color)\] "
    fi

    # Time of last command
    if [ ${load_part_prompt_slowcommandwarn} ]; then
	_NJB_NOWTIME=$(date +%s)
	_NJB_ENABLETIMER=yes
	if [ ${_NJB_PREVTIME} ]; then
	    local TOTTIME=$((${_NJB_NOWTIME} - ${_NJB_PREVTIME}))
	    if [ ${TOTTIME} -gt ${load_part_prompt_slowcommandwarn} ]; then
		local TOTTIME=$(int_prompt_hms ${TOTTIME})
		PS1+="\[$(set_color yellow)\][cmdtime:${TOTTIME}]\[$(set_color)\] "
	    fi
	fi
    fi

    # Bracket {
    # FIXME; duplicate code with #user
    if [ ${UID} -eq 0 ]; then
        if [ "${USER}" == "${LOGNAME}" ]; then
            if [[ ${SUDO_USER} ]]; then
                PS1+="\[$(set_color red)\]"
            else
                PS1+="\[$(set_color ered)\]"
            fi
        else
            PS1+="\[$(set_color yellow)\]"
        fi
    else
        if [ "${USER}" == "${LOGNAME}" ]; then
            PS1+="\[$(set_color green)\]"
        else
            PS1+="\[$(set_color eyellow)\]"
        fi
    fi
    PS1+="{ "

    # Working directory
    if [ -w "${PWD}" ]; then
        PS1+="\[$(set_color green)\]$(prompt_workingdir)"
    else
        PS1+="\[$(set_color red)\]$(prompt_workingdir)"
    fi

    # Closing bracket } and $\#
    # FIXME: duplicate code with user
    if [ ${UID} -eq 0 ]; then
        user_mark="\[$(set_color red)\]#"
        if [ "${USER}" == "${LOGNAME}" ]; then
            if [[ ${SUDO_USER} ]]; then
                PS1+="\[$(set_color red)\]"
            else
                PS1+="\[$(set_color ered)\]"
            fi
        else
            PS1+="\[$(set_color yellow)\]"
        fi
    else
        user_mark="\[$(set_color green)\]$"
        if [ "${USER}" == "${LOGNAME}" ]; then
            PS1+="\[$(set_color green)\]"
        else
            PS1+="\[$(set_color eyellow)\]"
        fi
    fi

    PS1+=" }$user_mark\[$(set_color)\] "
}

# Trim working dir to 1/3 the screen width
function prompt_workingdir() {
    local pwdmaxlen=$((${COLUMNS}))
    let pwdmaxlen=${pwdmaxlen}/3
    local trunc_symbol="..."
    if [[ ${PWD} == ${HOME}* ]]; then
	newPWD="~${PWD#$HOME}"
    else
	newPWD=${PWD}
    fi
    if [ ${#newPWD} -gt $pwdmaxlen ]; then
	local pwdoffset=$(( ${#newPWD} - $pwdmaxlen + 3 ))
	newPWD="${trunc_symbol}${newPWD:$pwdoffset:$pwdmaxlen}"
    fi
    echo $newPWD
}

# Determine what prompt to display:
# 1.  Display simple custom prompt for shell sessions started
#     by script.
# 2.  Display "bland" prompt for shell sessions within emacs or
#     xemacs.
# 3   Display promptcmd for all other cases.

function load_prompt() {
    # Get process and parent process names.
    local parent_process=$(ps -p $PPID -o comm | tail -n 1)
    local my_process=$(ps -p $$ -o comm | tail -n 1)
     
    # Trap DEBUG to be able to set a timer
    if [ ${load_part_prompt_slowcommandwarn} ]; then
	trap 'if [ "x${_NJB_ENABLETIMER}" == "xyes" ]; then _NJB_PREVTIME=$(date +%s); _NJB_ENABLETIMER=no; fi' DEBUG
    fi

    if  [[ "${parent_process}" == "script" ]]; then
        # This PROMPT_COMMAND must be uncommented to be sure that it's reset for
        # script sessions.  Otherwise the PROMPT_COMMAND will run and replace
        # whatever we set PS1 to here.
        PROMPT_COMMAND=""

        case ${TERM} in
            xterm*  )
                PS1="\[\033]0;SCRIPT: \u@\h { \w }  \007\]"
                PS1+="\t - \# - \u@\H { \w }\$ "
                ;;
            screen*  )
                # this is currently untested due to errors starting script in
                # screen
                PS1='\[\033k'
                PS1+="SCREEN: SCRIPT: \u@\h { $(prompt_workingdir) }"
                PS1+='\033\\\]'
                PS1+="\t - \# - \u@\H { \w }\$ "
                ;;
            *       )
                PS1="\t - \# - \u@\H { \w }\$ "
                ;;
        esac
    elif [[ $parent_process == emacs* || $parent_process == xemacs* ]]; then
        # Leave uncommented. Same reason as above.
        PROMPT_COMMAND=""
        PS1="\u@\h { \w }\$ "
    else
        export DAY=$(date +%A)
        CURRENT_PROMPT="$(echo ${PROMPT_COMMAND:-:} | sed 's/\; promptcmd*//g')" # Little cleanup as well..
        PROMPT_COMMAND="${CURRENT_PROMPT}; promptcmd"
        #PROMPT_COMMAND=promptcmd
    fi
    export PS1 PROMPT_COMMAND
    export SUDO_PS1="\[\h:\w\] \u\\$ " # We should not display this prompt when using sudo su, or sudo su -. It will break!
}

load_prompt
