#!/bin/bash

#####################################################################
# Global functions in here. Will always be loaded
#####################################################################


# Print warning message.
function warning() {
    echo "$*" >&2
}

# Print error message and exit.
function error() {
    echo "$*" >&2
    #exit 1
}

# Ask yesno question. (taken from http://www.linuxjournal.com/content/asking-yesno-question-bash-script)
# Minor changes by Lars Solberg
#
# Usage: yesno OPTIONS QUESTION
#
#   Options:
#     --timeout N    Timeout if no input seen in N seconds.
#     --default ANS  Use ANS as the default answer on timeout or
#                    if an empty answer is provided.
#
# Exit status is the answer.
function yesno() {
    local ans
    local ok=0
    local timeout=0
    local charcount
    local default
    local t

    while [[ "$1" ]]; do
        case "$1" in
            --default)
		shift
		default=$1
		if [[ ! "$default" ]]; then error "Missing default value"; fi
		t=$(tr '[:upper:]' '[:lower:]' <<<$default)

		if [[ "$t" != 'y'  &&  "$t" != 'yes'  &&  "$t" != 'n'  &&  "$t" != 'no' ]]; then
                    error "Illegal default answer: $default"
		fi
		default=$t
		shift
		;;

            --timeout)
		shift
		timeout=$1
		if [[ ! "$timeout" ]]; then error "Missing timeout value"; fi
		if [[ ! "$timeout" =~ ^[0-9][0-9]*$ ]]; then error "Illegal timeout value: $timeout"; fi
		shift
		;;

	    --charcount)
		shift
		charcount=$1
		shift
		;;

	    --nonewline)
		nonewline=1
		shift
		;;

            -*)
		error "Unrecognized option: $1"
		break
		;;

            *)
		break
		;;
        esac
    done

    if [[ $timeout -ne 0  &&  ! "$default" ]]; then
        error "Non-zero timeout requires a default answer"
    fi

    while [[ $ok -eq 0 ]]; do
	if [ -z ${charcount} ]; then
	    charcount_cmd=""
	else
	    charcount_cmd=" -n ${charcount}"
	fi

        if [[ $timeout -ne 0 ]]; then
            if ! eval read -t $timeout $charcount -p "$*" ans; then
                ans=$default
            else
                # Turn off timeout if answer entered.
                timeout=0
                if [[ ! "$ans" ]]; then ans=$default; fi
            fi
        else
	    if [ -z ${nonewline} ]; then
		echo "${1}"
	    else
		echo -n "${1}"
	    fi

	    read_cmd="read ${charcount_cmd} ans"
            eval ${read_cmd}

            if [[ ! "$ans" ]]; then
                ans=$default
            else
                ans=$(tr '[:upper:]' '[:lower:]' <<<$ans)
            fi 
        fi

        if [[ "$ans" == 'y'  ||  "$ans" == 'yes'  ||  "$ans" == 'n'  ||  "$ans" == 'no' ]]; then
            ok=1
        fi

	# We want to ask the user with our own text
        #if [[ $ok -eq 0 ]]; then
	#    warning "Valid answers are: yes y no n"
	#fi
    done
    [[ "$ans" = "y" || "$ans" == "yes" ]]
}